# create eip for the webserver
resource "aws_eip" "eip_dev_main" {
  vpc                       = true
  network_interface         = aws_network_interface.nic-webserver_dev_main.id
  associate_with_private_ip = "10.0.1.10"
  depends_on                = [aws_internet_gateway.gw_dev_main]
  tags = {
    "environment" = "development"
  }
}

# create subnets inside the vpc
resource "aws_subnet" "subnet_public_dev_main" {
  vpc_id            = aws_vpc.vpc_dev_main.id
  cidr_block        = "10.0.1.0/24"
  availability_zone = "${var.region}${var.availability-zone}"
  map_public_ip_on_launch = "false"
  tags = {
    "environment" = "development"
  }
}

resource "aws_subnet" "subnet_private_dev_main" {
  vpc_id            = aws_vpc.vpc_dev_main.id
  cidr_block        = "10.0.2.0/24"
  availability_zone = "${var.region}${var.availability-zone_second}"
  map_public_ip_on_launch = "false"
  tags = {
    "environment" = "development"
  }
}

# connect subnet inside of the vpc with routing table of vpc (=create association between both)
resource "aws_route_table_association" "rt-association_public_subnet_dev_main" {
  subnet_id      = aws_subnet.subnet_public_dev_main.id
  route_table_id = aws_route_table.rt_public_dev_main.id
}

resource "aws_route_table_association" "rt-association_private_subnet_dev_main" {
  subnet_id      = aws_subnet.subnet_private_dev_main.id
  route_table_id = aws_route_table.rt_private_dev_main.id
}


# s3 bucket
# access example file: https://s3-0.s3.eu-central-1.amazonaws.com/Screenshot+from+2020-06-20+20-22-29.png
resource "aws_s3_bucket" "s3-0_dev_main" {
  bucket        = var.bucketname
  policy        = data.aws_iam_policy_document.default.json
  force_destroy = true
  acl           = "private"

  versioning {
    enabled = true
  }
  tags = {
    "Name"        = "first s3 bucket"
    "environment" = "development"
  }
}


# create a general secruity group per subnet
#   are the configuration files for the firewall of the ec2
resource "aws_security_group" "sg-public-subnet_dev_main" {
  name        = "allow_web_traffic_new"
  description = "Allow web inbound traffic"
  vpc_id      = aws_vpc.vpc_dev_main.id
  ingress {
    description = "HTTPS"
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  ingress {
    description = "HTTP"
    from_port   = var.server_port_http
    to_port     = var.server_port_http
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  ingress {
    description = "SSH"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    description = "ICMP"
    from_port   = -1
    to_port     = -1
    protocol    = "icmp"
    cidr_blocks = ["10.0.0.0/16"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
  tags = {
    Name          = "sg-public-subnet"
    "environment" = "development"
  }
}

resource "aws_security_group" "sg-private-subnet_dev_main" {
  name        = "not_allow_web_traffic"
  description = "Allow web inbound traffic"
  vpc_id      = aws_vpc.vpc_dev_main.id

  # https://stackoverflow.com/questions/35384657/allow-access-to-one-aws-security-group-to-another-using-terraform
  # can only ssh by first jump on a host in public subnet
  ingress {
    security_groups = [aws_security_group.sg-public-subnet_dev_main.id]
    from_port       = 0
    to_port         = 0
    protocol        = "-1"
    cidr_blocks     = ["0.0.0.0/0"]
  }
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
  tags = {
    Name          = "sg-private-subnet"
    "environment" = "development"
  }
}

# create general network-interface for possible devices
#   one for devices in public subnet
#   one for devices in private subnet
resource "aws_network_interface" "nic-webserver_dev_main" {
  subnet_id = aws_subnet.subnet_public_dev_main.id
  # 10.0.0.0, 10.0.0.1, 10.0.0.2, 10.0.0.3 + the last ip (here 10.0.0.255) are reserved and cant be used
  # https://acloud.guru/forums/aws-certified-sysops-administrator-associate/discussion/-KONipHaJrEGFgjt0K7M/first-3-available-or-first-4-and-last-ip-address-are-reserved
  private_ips     = ["10.0.1.10"]
  security_groups = [aws_security_group.sg-public-subnet_dev_main.id]
  tags = {
    "environment" = "development"
  }
}

resource "aws_network_interface" "nic-priv-subnet_dev_main" {
  subnet_id       = aws_subnet.subnet_private_dev_main.id
  private_ips     = ["10.0.2.10"]
  security_groups = [aws_security_group.sg-private-subnet_dev_main.id]
  tags = {
    "environment" = "development"
  }
}

# create webserver
#   at least one public
#   possible: one private
resource "aws_instance" "aws-ubuntu-instance_dev_main" {
  ami               = "ami-0502e817a62226e03"
  instance_type     = "t3.micro"
  availability_zone = "${var.region}${var.availability-zone}"
  key_name          = "ssh-key"
  network_interface {
    device_index         = 0
    network_interface_id = aws_network_interface.nic-webserver_dev_main.id
  }
  iam_instance_profile = aws_iam_instance_profile.ec2_profile.name
  user_data            = <<-EOF
              #!/bin/bash
              sudo apt update -y
              sudo apt install apache2 -y
              sudo systemctl start apache2
              sudo bash -c 'echo your very first web server on port "${var.server_port_http}"> /var/www/html/index.html'
              EOF
  tags = {
    "environment" = "development"
  }
}


# the access would work, but this os does not provide aws cli-tool and this instance is in a private subnet
# resource "aws_instance" "aws-ubuntu-instance2_dev_main" {
#   ami               = "ami-0502e817a62226e03"
#   instance_type     = "t3.micro"
#   availability_zone = "${var.region}${var.availability-zone}"
#   key_name          = "ssh-key"
#   network_interface {
#     device_index         = 0
#     network_interface_id = aws_network_interface.nic-priv-subnet_dev_main.id
#   }
#   iam_instance_profile = aws_iam_instance_profile.ec2_profile.name
# }